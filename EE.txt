### 1 Voir fichier .png

###2.
Tout gauche = 22
Le conduit de score de confiance maximal dans ex 2 est 3,2,5,6

## Exercice 3

2,5,2
2,5,3
2,1,3
2,1,9

## Exercice 4
n(n-1)

2^(n-1)

Complexité exponentielle

## Exercice 5 

Tester tous les conduits est inefficace car le nombre de possibilités augmente exponentiellement 
avec la hauteur de la pyramide, soit une complexité algorithmique exponentielle.

## Exercice 6 

def score_max(i,j,p):
	if i == 0:
		return score_max(len(p)-1,j,p) = p[len(p)-1][j]
	else:
		return score_max(i,j,p) = p[i][j] + max(score_max(i+1,j,p), score_max(i+1,j+1,p))

	i == len(p) -1

## Exercice 7

def pyr_vide(n):
    pyr = []
    for i in range(1,n+1):
        pyr.append([0]*i)
    return pyr

## Exercice 8 

def prog_dyn(p):
	n = len(p)
	s = pyr_vide(n)
	for j in s[-1]
		s[n-1][j] = p[j]
	for i in ...:
		for j in ...:
			s[i][j] = ...	
	return s[0] 

## Exercice 9 

Cela peut être démontré en analysant le nombre d'opérations que la fonction effectue, qui est proportionnel à n².

## Exercoce 10

L'adaptation consiste à mémoriser les scores déjà calculés pour les utiliser dans les calculs ultérieurs, plutôt que de recalculer à chaque foi